<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/06/21/zi-jie-mian-shi-ti/"/>
      <url>2021/06/21/zi-jie-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<ol><li><p>粘性定位有什么特点，绝对定位是相对什么边界进行定位</p><blockquote><p>绝对行为元素是以相对定位元素的border内边缘为基准进行定位的，</p><p>粘性定位的特点是，滚动到一定位置时，效果跟fixed一样</p></blockquote></li><li><p>先是CSS部分，问position有哪些常用的值</p><blockquote><p>relative，absolute，static，sticky，fixed</p></blockquote></li><li><p>隐藏一个元素有哪些方法</p><blockquote><p>可以将opacity设为0、将visibility设为hidden、将display设为none或者将position设为absolute然后将位置设到不可见区域等。</p><p><code>display = 'none'</code></p></blockquote></li><li><p>display：none和opcity：0在事件响应上有什么区别</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/image-20210609103740835.png" alt="image-20210609103740835"></p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/06/21/sheng-ming-zhou-qi/"/>
      <url>2021/06/21/sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p>生命周期：事物从诞生到消亡的过程</p><p>vue生命周期：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/image-20210605144113533.png" alt="image-20210605144113533"></p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/image-20210605144150947.png" alt="image-20210605144150947"></p><p>语法糖：</p><blockquote><p>v-on     <code>v-on:click</code> == <code>@click</code></p><p>v-bind  <code>v-bind:src</code> == <code>:src</code></p></blockquote><p><img src="D:\Hexo\picgotupian\image-20210605195037066.png" alt="image-20210605195037066"></p><p>上图中写到了<strong>计算属性</strong>和<strong>方法</strong>分别设置样式，计算属性使用时无需使用<code>()</code></p><p>MVVM</p><p>Model  —-  View  —- View Model</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/06/21/gao-pin-this/"/>
      <url>2021/06/21/gao-pin-this/</url>
      
        <content type="html"><![CDATA[<h1 id="默认绑定与隐式绑定"><a href="#默认绑定与隐式绑定" class="headerlink" title="默认绑定与隐式绑定"></a>默认绑定与隐式绑定</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">"bar1"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token punctuation">:</span> <span class="token string">"bar2"</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token punctuation">:</span> <span class="token string">"bar3"</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// "bar1" – 默认绑定</span>o2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// "bar2" – 隐式绑定</span>o3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// "bar3" – 隐式绑定</span></code></pre><p>foo()这种调用方法，就是默认绑定。如果在非严格模式下，this就是全局对象，如果在严格模式下，this就会使undefined。</p><p>o2.foo()和o3.foo()这两种调用方法，都是隐式绑定。foo是作为o2和o3的方法而调用的，谁调用foo，this就指向谁。（<strong>不要搞混变量和this</strong>）。</p><h1 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">"bar1"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token punctuation">:</span> <span class="token string">"bar2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// "bar1"   默认绑定</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "bar2"  显式绑定，使用obj作为"this"</span></code></pre><p>如果foo是通过call、apply或者bind调用的，那么这种调用就是显式绑定。</p><p>这种绑定中,this的指向就是这三个函数中传递的第一个参数。</p><h1 id="关键字new绑定"><a href="#关键字new绑定" class="headerlink" title="关键字new绑定"></a>关键字new绑定</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">"baz"</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>如果把new这个关键字放在一个函数调用的前面，JS编译器会做这四件事情：</p><ol><li>创建一个新的空的对象</li><li>把这个对象链接到原型对象上</li><li>这个对象被绑定为this</li><li>如果这个函数不返回任何东西，那么就会默认return this</li></ol><p>关于new这个关键字的四步，看不懂也没事，有空的话会另写一篇文章具体介绍一下。不过，我们从这四步可以看出，如果在函数调用前面加上new，那么这个函数中的this就是这个新的对象。</p><p>上面的例子，最终会输出undefined undefined。这是因为baz这个变量并没有bar这个属性，而baz此时只被定义，没有被赋值，因此baz也是undefined。</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数会无视以上所有的规则，<strong>this的值就是函数创建时候所在的lexical scope中的this，而和调用方式无关</strong>。可以对比下面两个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出undefined</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面没有使用箭头函数的例子当中，setTimeout内部的函数是被global调用的，而global没有age这个属性，因此输出undefined。</p><p>第二个例子使用了箭头函数，this就会使用lexical scope中的this，就是Person，因此输出10。</p><h1 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h1><p>如果多重绑定规格都适用，那么绑定规则的优先级顺序是这样的：</p><ol><li>箭头函数</li><li>关键字new调</li><li>显式绑定</li><li>隐式绑定</li><li>默认绑定</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/06/21/di-er-bu-fen/"/>
      <url>2021/06/21/di-er-bu-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h1><p>计算属性一般是没有set方法，只读属性</p><p>set和get都可以写，但一般不使用set，所以直接写函数名使用就直接调用get方法了</p><p><img src="D:\Hexo\picgotupian\image-20210605203522072.png" alt="image-20210605203522072"></p><p>在页面显示数据时，计算属性和方法的效果都一样</p><p>但是选择什么呢</p><p>当然是计算属性了</p><p>因为，方法是在使用时，会被调用许多次，但是计算属性只会调用一次，它会本身被缓存，减少使用次数</p><p>计算属性例子：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/image-20210605211420026.png" alt="image-20210605211420026"></p><p><img src="D:\Hexo\picgotupian\image-20210605211432029.png" alt="image-20210605211432029"></p><p>方法例子：</p><p><img src="D:\Hexo\picgotupian\image-20210605211519769.png" alt="image-20210605211519769"></p><p><img src="D:\Hexo\picgotupian\image-20210605211509760.png" alt="image-20210605211509760"></p><p>结果自然一目了然</p><p>ES5和ES6</p><p>ES5的var没有块级作用域</p><p>但是ES5使用闭包时，可以立即调用</p><p>闭包可以使用是因为，function有自己的作用域</p><p>ES6的let有块级作用域</p><h1 id="属性增强写法"><a href="#属性增强写法" class="headerlink" title="属性增强写法"></a>属性增强写法</h1><p><img src="D:\Hexo\picgotupian\image-20210606165314145.png" alt="image-20210606165314145"></p><p>v-on使用时，如果点击事件没有传参，则会默认传入浏览器生产的event对象</p><p><img src="D:\Hexo\picgotupian\image-20210606173826783.png" alt="image-20210606173826783"></p><p><img src="D:\Hexo\picgotupian\image-20210606173837087.png" alt="image-20210606173837087"></p><p><img src="D:\Hexo\picgotupian\image-20210606173848132.png" alt="image-20210606173848132"></p><p>想要获取event对象时，传入event是没有用的</p><p><img src="D:\Hexo\picgotupian\image-20210606174206519.png" alt="image-20210606174206519"></p><p><img src="D:\Hexo\picgotupian\image-20210606174237924.png" alt="image-20210606174237924"></p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/image-20210606174217051.png" alt="image-20210606174217051"></p><p>正确写法：</p><p><img src="D:\Hexo\picgotupian\image-20210606174313851.png" alt="image-20210606174313851"></p><h1 id="v-if等"><a href="#v-if等" class="headerlink" title="v-if等"></a>v-if等</h1><p>一个涉及到的问题</p><p>因为vue和react渲染DOM的时候，都启用了虚拟DOM，所以在显示数据的时候，为了提高性能，节省空间，会减少加载一些东西。</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户账号<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户邮箱<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isUser <span class="token punctuation">=</span> !isUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>切换类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在这段代码中，如果input的key值没有，点击按钮切换类型时，在input中输入的值会在切换类型的时候，一样被带过去。</p><p>因为在虚拟DOM中，切换label和input的时候，虚拟DOM发现了下一个切换类型相同，就不会将的label和input切换走，而是留下label和input标签，只改变其中的属性值，而渲染在input内的value也不会被更改（个人理解就是：<mark>已经渲染在页面上的东西，就不想再动了，怕影响性能</mark>）</p><p>如果想要改变的话就要加一个key值，给他们一个特定标识符，让vue或者react判断他们不相同。所以key值很重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/06/21/http-gao-pin/"/>
      <url>2021/06/21/http-gao-pin/</url>
      
        <content type="html"><![CDATA[<h1 id="http请求头有哪些"><a href="#http请求头有哪些" class="headerlink" title="http请求头有哪些"></a>http请求头有哪些</h1><p>HTTP的头信息包括<strong>通用头，请求头，响应头</strong>和<strong>实体头</strong>四个部分。</p><blockquote><p><strong>Accept：</strong>指定客户端能够接收的内容类型。</p><p><strong>Accept-Charset：</strong>浏览器可以接受的字符编码集。</p><p><strong>Accept-Encoding：</strong>指定浏览器可以支持的web服务器返回内容压缩编码类型。</p><p><strong>Accept-Language：</strong>浏览器可接受的语言。</p><p><strong>Accept-Ranges：</strong>可以请求网页实体的一个或者多个子范围字段。</p><p><strong>AuthorizationHTTP：</strong>授权的授权证书。</p><p><strong>Cache-Control：</strong>指定请求和响应遵循的缓存机制。</p><p><strong>Connection：</strong>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</p><p><strong>CookieHTTP：</strong>请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p><p><strong>Content-Length：</strong>请求的内容长度。</p><p><strong>Content-Type：</strong>请求的与实体对应的MIME信息。</p><p><strong>Date：</strong>请求发送的日期和时间。</p><p><strong>Expect：</strong>请求的特定的服务器行为。</p><p><strong>From：</strong>发出请求的用户的Email。</p><p><strong>Host：</strong>指定请求的服务器的域名和端口号。</p><p><strong>If-Match：</strong>只有请求内容与实体相匹配才有效。</p><p><strong>If-Modified-Since：</strong>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码。</p><p><strong>If-None-Match：</strong>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变。</p><p><strong>If-Range：</strong>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。</p><p><strong>If-Unmodified-Since：</strong>只在实体在指定时间之后未被修改才请求成功。</p><p><strong>Max-Forwards：</strong>限制信息通过代理和网关传送的时间。</p><p><strong>Pragma：</strong>用来包含实现特定的指令。</p><p><strong>Proxy-Authorization：</strong>连接到代理的授权证书。</p><p><strong>Range：</strong>只请求实体的一部分，指定范围。</p><p><strong>Referer：</strong>先前网页的地址，当前请求网页紧随其后,即来路。</p><p><strong>TE：</strong>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</p><p><strong>Upgrade：</strong>向服务器指定某种传输协议以便服务器进行转换（如果支持。</p><p><strong>User-AgentUser-Agent：</strong>的内容包含发出请求的用户信息。</p><p><strong>Via：</strong>通知中间网关或代理服务器地址，通信协议。</p><p><strong>Warning：</strong>关于消息实体的警告信息</p></blockquote><h1 id="HTTP响应头"><a href="#HTTP响应头" class="headerlink" title="HTTP响应头"></a>HTTP响应头</h1><blockquote><p><strong>Accept-Ranges：</strong>表明服务器是否支持指定范围请求及哪种类型的分段请求。</p><p><strong>Age：</strong>从原始服务器到代理缓存形成的估算时间（以秒计，非负）。</p><p><strong>Allow：</strong>对某网络资源的有效的请求行为，不允许则返回405。</p><p><strong>Cache-Control：</strong>告诉所有的缓存机制是否可以缓存及哪种类型。</p><p><strong>Content-Encodingweb：</strong>服务器支持的返回内容压缩编码类型。。</p><p><strong>Content-Language：</strong>响应体的语言。</p><p><strong>Content-Length：</strong>响应体的长度。</p><p><strong>Content-Location：</strong>请求资源可替代的备用的另一地址。</p><p><strong>Content-MD5：</strong>返回资源的MD5校验值。</p><p><strong>Content-Range：</strong>在整个返回体中本部分的字节位置。</p><p><strong>Content-Type：</strong>返回内容的MIME类型。</p><p><strong>Date：</strong>原始服务器消息发出的时间。</p><p><strong>ETag：</strong>请求变量的实体标签的当前值。</p><p><strong>Expires：</strong>响应过期的日期和时间。</p><p><strong>Last-Modified：</strong>请求资源的最后修改时间。</p><p><strong>Location：</strong>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源。</p><p><strong>Pragma：</strong>包括实现特定的指令，它可应用到响应链上的任何接收方。</p><p><strong>Proxy-Authenticate：</strong>它指出认证方案和可应用到代理的该URL上的参数。</p><p><strong>refresh：</strong>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</p><p><strong>Retry-After：</strong>如果实体暂时不可取，通知客户端在指定时间之后再次尝试。</p><p><strong>Serverweb：</strong>服务器软件名称。</p><p><strong>Set-Cookie：</strong>设置Http Cookie。</p><p><strong>Trailer：</strong>指出头域在分块传输编码的尾部存在。</p><p><strong>Transfer-Encoding：</strong>文件传输编码。</p><p><strong>Vary：</strong>告诉下游代理是使用缓存响应还是从原始服务器请求。</p><p><strong>Via：</strong>告知代理客户端响应是通过哪里发送的。</p><p><strong>Warning：</strong>警告实体可能存在的问题。</p><p><strong>WWW-Authenticate：</strong>表明客户端请求实体应该使用的授权方案。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react面试题</title>
      <link href="2021/06/04/react-view/"/>
      <url>2021/06/04/react-view/</url>
      
        <content type="html"><![CDATA[<h4 id="render函数中return如果没有使用-会有什么问题？"><a href="#render函数中return如果没有使用-会有什么问题？" class="headerlink" title="render函数中return如果没有使用()会有什么问题？"></a>render函数中return如果没有使用()会有什么问题？</h4><p>在不换行的情况下没有问题，换行的话就需要用()包住</p><p>原因在于，JSX转为js后，js会在每行自动加<code>';'</code>，如果return后换行了，那么就会变成return;</p>]]></content>
      
      
      <categories>
          
          <category> react复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域scope</title>
      <link href="2021/06/01/scope/"/>
      <url>2021/06/01/scope/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>是指程序源代码中定义变量的区域。</p><p>规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><p>JavaScript采用词法作用域，也就是静态作用域。</p><h2 id="静态作用域与动态作用域"><a href="#静态作用域与动态作用域" class="headerlink" title="静态作用域与动态作用域"></a>静态作用域与动态作用域</h2><p>因为JavaScript采用的词法作用域，函数的作用域在函数定义的时候就决定了。</p><p>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 考虑输出结果</span></code></pre><p>按照静态作用域分析：</p><blockquote><p>执行foo函数，先从foo函数内部查找是否有局部变量value，如果没有，就根据书写的位置，查找上面一层的代码，也就是value等于1，所以会打印1。</p></blockquote><p>按照动态作用域分析：</p><blockquote><p>执行foo函数，也是从foo函数内部查找是否有局部变量value。如果没有，就从调用函数的作用域内找，就是去bar函数内部查找value变量，结果会打印2。</p></blockquote><p>但是JavaScript采用的是静态作用域，所以<strong>这个例子结果为1</strong>。</p><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>bash就是动态作用域，把下面的脚本存成例如scope.bash，然后进入相应的目录，用命令行执行<code>bash ./scope.bash</code>，看看效果。</p><pre class=" language-js"><code class="language-js">value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    echo $value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    local value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    foo<span class="token punctuation">;</span><span class="token punctuation">}</span>bar</code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这两段结果其实都会打印：<code>local scope</code>。</p><p>原因也简单，就是因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。</p><p>引用《JavaScript权威指南》的回答就是：</p><p>JavaScript函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数f()定义在这个作用域里，其中的变量scope一定是局部变量，不管何时何地执行函数f()，这种绑定在执行f()时依然有效。</p><h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><p>如果要问到JavaScript代码执行的顺序的话，想必写过JavaScript的开发者都会有个直观的印象，那就是顺序执行：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo1</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo2</span></code></pre><p>然而这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo2</span></code></pre><p>打印结果却是两个foo2。</p><p>这是因为JavaScript引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。</p><p>但是这个“一段一段”中的“段”究竟是怎么划分的呢？</p><p>到底JavaScript引擎遇到一段怎样的代码时才会做“准备工作”呢？</p><h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>JavaScript的可执行代码的类型分三种，<strong>全局代码</strong>，<strong>函数代码</strong>，<strong>eval代码</strong>。</p><p>举个例子，当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，换个更专业的说法叫做“<strong>执行上下文（execution context）</strong>”。</p><h2 id="执行上下文-1"><a href="#执行上下文-1" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>我们写的函数多了，如何管理创建的那么多执行上下文呢？</p><p>所以JavaScript引擎创建了执行上下文栈（ECS）来管理执行上下文。</p><p>为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：</p><pre class=" language-js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当JavaScript开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用<code>globalContext</code>表示它，并且只有当整个应用程序结束的时候，<code>ECStack</code>才会被清空，所以程序结束之前，<code>ECStack</code>最底部永远有个<code>globalContext</code>：</p><pre class=" language-jsx"><code class="language-jsx">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>    globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>现在JavaScript遇到下面的这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。所以按照这样的工作原理，上面的代码应该这样处理：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 伪代码</span><span class="token comment" spellcheck="true">// fun1()</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>fun1<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fun1中竟然调用了fun2，还要创建fun2的执行上下文</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>fun2<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 擦，fun2还调用了fun3！</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>fun3<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fun3执行完毕</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fun2执行完毕</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fun1执行完毕</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext</span><span class="token comment" spellcheck="true">// 栈的规则：先进后出</span><span class="token comment" spellcheck="true">// 入栈： golbalContext -> fun1 -> fun2 -> fun3</span><span class="token comment" spellcheck="true">// 出栈： fun3 -> fun2 -> fun1 -> golbalContext</span></code></pre><h2 id="解答思考题"><a href="#解答思考题" class="headerlink" title="解答思考题"></a>解答思考题</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>两段代码的执行结果一样，但是两段代码的不同在哪呢？</p><p>其实就是<strong>执行上下文栈的变化不一样</strong>。</p><p>第一段代码：</p><pre class=" language-js"><code class="language-js">ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>checkscope<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二段代码：</p><pre class=" language-js"><code class="language-js">ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>checkscope<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每一个追梦少年，都是一个偏执的梦旅人。</p><p>我的梦是什么—-可能就是赚足够的钱，养活家人，不用特别多，能在家里需要的时候拿出来，能为我爸我妈，岳父岳母养老，能每年都出去玩上几回，能养一个姑娘，一个儿子…</p><p>还有就是最希望我们身体都能健健康康~</p><h1 id="深入之变量对象"><a href="#深入之变量对象" class="headerlink" title="深入之变量对象"></a>深入之变量对象</h1><p>上面讲到，当JavaScript代码执行一段可执行代码时，会创建对应的执行上下文。</p><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象</li><li>作用域链</li><li>this</li></ul><h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>变量对象是执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p><p>因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文中的变量对象和函数上下文中的变量对象。</p><h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>全局对象：</p><blockquote><ul><li>全局对象是预定义的对象，作为JavaScript的全局函数和全局属性的占位符。通过使用全局对象，可以访问其他所有预定义的对象、函数和属性。</li><li>在顶层JavaScript代码中，可以用关键字this引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</li><li>例如，当JavaScript代码使用<code>parseInt()</code>函数时，它引用的是全局对象的<code>parseint</code>属性。全局对象是作用域的头，还意味着在顶层JavaScript代码中声明的所有变量都将成为全局对象的属性。</li></ul></blockquote><p>下面几个例子：</p><p>1.可以通过this引用，在客户端JavaScript中，全局对象就是Window对象。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Window</span></code></pre><p>2.全局对象是由Object构造函数实例化的一个对象。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>3.预定义了一堆，可以说一大堆函数和属性。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 都能生效</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.作为全局变量的宿主。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.客户端JavaScript中，全局对象有window属性指向自身。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>window<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><mark>全局上下文中的变量对象就是全局对象。</mark></p><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数上下文中，我们用活动对象（activation object，AO）来表示变量对象。</p><p>活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在JavaScript环境中访问，只有当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫activation object，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。</p><p>活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性是Arguments对象。</p><p><a href="https://www.cnblogs.com/huangwenjietk/p/10850307.html">不熟悉arguments点这里</a>。</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>执行上下文的代码会分成两个阶段进行处理：分析和执行，也可以叫做：</p><ol><li><strong>进入执行上下文</strong></li><li><strong>执行代码</strong></li></ol><h4 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h4><p>当进入执行上下文时，还未执行代码</p><p>变量对象会包括：</p><ol><li>函数的所有形参（如果是函数上下文）<ul><li>由名称和对应值组成的一个变量对象的属性被创建</li><li>没有实参，属性值设为undefined</li></ul></li><li>函数声明<ul><li>由名称和对应值（函数对象（function-object））组成一个变量对象的属性被创建</li><li>如果变量对象已经存在相同名称的属性，则完全替换这个属性</li></ul></li><li>变量声明<ul><li>由名称和对应值（undefined）组成一个变量对象的属性被创建；</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></li></ol><p>举个栗子🌰：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>进入执行上下文后，这时的AO是：</p><pre class=" language-js"><code class="language-js">AO <span class="token operator">=</span> <span class="token punctuation">{</span>    arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        length<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    c<span class="token punctuation">:</span> reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> undefined<span class="token punctuation">}</span></code></pre><h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值。</p><p>一样使用上面的例子，执行完成后，AO是：</p><pre class=" language-js"><code class="language-js">AO <span class="token operator">=</span> <span class="token punctuation">{</span>    arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        length<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> reference to FunctionExpression <span class="token string">"d"</span><span class="token punctuation">}</span></code></pre><p>到这里变量对象的创建过程就介绍完了，简介的总结一下：</p><pre><code> 1. 全局上下文的变量对象初始化是全局对象； 2. 函数上下文的变量对象初始化只包括Arguments对象； 3. 在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值； 4. 在代码执行阶段，会再次修改变量对象的属性值。</code></pre><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>第一题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ???</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ???</span></code></pre><p>第一段会报错：<code>Uncaught ReferenceError: a is not defined</code>。</p><p>第二段会打印：<code>1</code>。</p><p>这是因为函数中的“a”并没有通过var关键字声明，所以不会被存放在AO中。</p><p>第一段执行console的时候，AO的值是：</p><pre class=" language-js"><code class="language-js">AO <span class="token operator">=</span> <span class="token punctuation">{</span>    arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>        length<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>没有a的值，就会到全局去找，全局也没有，所以就会报错。</p><p>当第二段执行console的时候，全局对象已经被赋予了a属性，这时候就可以从全局找到a的值，所以会打印1。</p></li><li><p>第二题</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>会打印函数，而不是undefined。</p><p>因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p></li></ol><h1 id="深入之作用域链"><a href="#深入之作用域链" class="headerlink" title="深入之作用域链"></a>深入之作用域链</h1><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象</li><li>作用域链</li><li>this</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>上面讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p><p>下面，让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p><h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><p>因为JavaScript是词法作用域，所以函数的作用域在函数定义的时候就决定了。</p><p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p><p>举个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>函数创建时，各自的[[scope]]为：</p><pre class=" language-js"><code class="language-js">foo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    globalContext<span class="token punctuation">.</span>VO<span class="token punctuation">]</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    fooContext<span class="token punctuation">.</span>AO<span class="token punctuation">,</span>    globalContext<span class="token punctuation">.</span>VO<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h2><p>当函数激活时，进入函数上下文，创建VO/AO后，就会将活动对象添加到作用链的前端。</p><p>这时候执行上下文的作用域链，我们命名为Scope：</p><pre class=" language-js"><code class="language-js">Scope <span class="token operator">=</span> <span class="token punctuation">[</span>AO<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至此，作用域链创建完毕。</p><h3 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a>分析一下</h3><p>用下面的例子，结合之前的变量对象和执行上下文栈，总结一下函数执行上下文中作用域链和变量对象的创建过程：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope2 <span class="token operator">=</span> <span class="token string">'local scope'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scope2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行过程如下：</p><ol><li><p><code>checkscope</code>函数被创建，保存作用域链到<strong>内部属性[[scope]]</strong></p><pre class=" language-js"><code class="language-js">checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    globalContext<span class="token punctuation">.</span>VO<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>执行c<code>heckscope</code>函数，创建<code>checkscope</code>函数执行上下文，<code>checkscope</code>函数执行上下文被压入执行上下文栈</li></ol><pre class=" language-js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>    checkscopeContext<span class="token punctuation">,</span>    globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ol start="3"><li><code>checkscope</code>函数并不立刻执行，开始做准备工作，<strong>第一步</strong>，复制函数[[scope]]属性创建作用域链</li></ol><pre class=" language-js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>    Scope<span class="token punctuation">:</span> checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ol start="4"><li><strong>第二步</strong>，用<code>arguments</code>创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</li></ol><pre class=" language-js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>    AO<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>            length<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        scope2<span class="token punctuation">:</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Scope<span class="token punctuation">:</span> checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ol start="5"><li><strong>第三步</strong>，将活动对象压入<code>checkscope</code>作用域链顶端</li></ol><pre class=" language-js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>    AO<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>            length<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        scope2<span class="token punctuation">:</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Scope<span class="token punctuation">:</span> <span class="token punctuation">[</span>AO<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>做完准备工作，开始执行函数，随着函数的执行，修改AO的属性值</li></ol><pre class=" language-js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>    AO<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>            length<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        scope2<span class="token punctuation">:</span> <span class="token string">'local scope'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Scope<span class="token punctuation">:</span> <span class="token punctuation">[</span>AO<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="7"><li>查找到scope2的值，返回后函数执行完毕，函数执行上下文从执行上下文栈中弹出</li></ol><pre class=" language-js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>    globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链prototype</title>
      <link href="2021/05/31/prototype/"/>
      <url>2021/05/31/prototype/</url>
      
        <content type="html"><![CDATA[<h1 id="原型到原型链复习"><a href="#原型到原型链复习" class="headerlink" title="原型到原型链复习"></a>原型到原型链复习</h1><h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><p>先使用构造函数创建一个对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Kevin</span></code></pre><p>上面代码中，Person是一个构造函数，我们使用new创建了一个实例对象person。</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>每个函数都有一个prototype属性，比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意：prototype是函数才会有的属性</span>Persion<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Kevin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Kevin</span></code></pre><p>其实，函数的prototype属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的person1和person2的原型。</p><p><strong>原型</strong>：可以理解为，每一个JavaScript对象（null除外）在创建的时候就会与之关联另一个对象，这个对象就是原型，每一个对象都会从原型“继承”属性。</p><p>构造函数和实例原型之间的关系（图中用<code>Object.prototype</code>表示实例原型）：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/prototype1.png" alt="构造函数和实例原型之间的关系"></p><p>那么如何表示<strong>实例</strong>与<strong>实例原型</strong>，也就是<code>person</code>和<code>Person.prototype</code>之间的关系呢，这时候就用到第二个属性：</p><h3 id="proto"><a href="#proto" class="headerlink" title="_proto_"></a>_<em>proto</em>_</h3><p>这是每一个JavaScript对象（除了null）都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。</p><p>证明：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>关系图：</p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/prototype2.png" alt="prototype2"><p>实例对象和构造函数都可以指向原型，原型是否有属性指向构造函数或者实例呢？</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>指向实例是没有的，因为一个构造函数可以生成多个实例，但是<strong>原型指向构造函数</strong>是有的，<mark>constructor</mark>，每个原型都有一个constructor属性指向关联的构造函数。</p><p>验证：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>下一个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>这里注意：</p><p>当获取person.constructor时，其实person中并没有constructor属性，当不能读取到constructor属性时，会从person的原型也就是Person.prototype中读取，正好原型中有该属性，所以：</p><pre class=" language-js"><code class="language-js">person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span></code></pre><p>进一步更新关系图：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/prototype3.png" alt="关系图"></p><p>综上：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//ES5的方法，可以获得对象的原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ture</span></code></pre><h2 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找对象关联的原型中的属性，如果还查不到就去找原型的原型，一直到最顶层为止。</p><p>举个栗子🌰：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Daisy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Daisy</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Kevin</span></code></pre><p>第一个输出Daisy不用多说。</p><p>后面删除person的name属性时，读取person.name，从person对象中找不到name属性，就从person的原型——person.__proto__，也就是Person.prototype中查找，找到了Kevin。</p><p>若没找到呢？原型的原型又是什么？</p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>原型是一个对象，既然是对象，我们就可以用最原始的方式创建它：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Kevin</span></code></pre><p>其实原型对象就是通过Object构造函数生成的，结合之前所讲，实例的__proto__指向构造函数的prototype，更新关系图：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/prototype4.png" alt="更新关系图"></p><p>这样来看<code>Person.prototype</code>，就等同于<code>Object</code>的实例化。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>那<code>Object.prototype</code>的原型呢？</p><p>null，我们可以输出：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>那么null代表什么呢？</p><p>引用阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html">《undefined与null的区别》</a> 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以<code>Object.prototype.__proto__</code>的<strong>值为null</strong>和<code>Object.prototype</code><strong>没有原型</strong>是一个意思。</p><p>所以查找属性的时候查到Object.prototype就可以停止查找了。</p><p>最终关系图：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/prototype5.png" alt="最终关系图"></p><p>图中由相互关联的原型组成的链状结构就是原型链，就是蓝色的这条线。</p><p>_<em>proto</em>_ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于<code>Object.prototype</code>，与其说是一个属性，不如说是一个 <code>getter/setter</code>，当使用 <code>obj.__proto__ </code>时，可以理解成返回了 <code>Object.getPrototypeOf(obj)</code>。</p><p>最后，继承，引用《你不知道的JavaScript》中的话，就是：继承意味着复制操作，然而JavaScript默认并不会复制对象的属性，相反，JavaScript只是在两个对象之间创建关联，更像委托的关系。</p><p>总结图：</p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/108361110-09e48c80-722d-11eb-9732-3fdb0615f07c.png" alt="108361110-09e48c80-722d-11eb-9732-3fdb0615f07c"></p>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习react(02)</title>
      <link href="2021/05/31/react2/"/>
      <url>2021/05/31/react2/</url>
      
        <content type="html"><![CDATA[<h1 id="复习react（02）"><a href="#复习react（02）" class="headerlink" title="复习react（02）"></a>复习react（02）</h1><h2 id="7-条件渲染"><a href="#7-条件渲染" class="headerlink" title="7. 条件渲染"></a>7. 条件渲染</h2><p>在 React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。</p><p>React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 或者<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件运算符</a>去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。</p><p>观察以下两个组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome back<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">GuestGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please sign up<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再创建一个<code>Greeting</code>组件，它会根据用户是否登录来决定显示上面的哪个组件。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h3><p>可以使用变量来存储元素。可以有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。</p><p>注销和登录组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">LoginButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            Login        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LogoutButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            Logout        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在下面的示例中，我们将创建一个名叫 <code>LoginControl</code> 的<a href="https://react.docschina.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class">有状态的组件</a>。</p><p>它将根据当前的状态来渲染 <code>&lt;LoginButton /&gt;</code> 或者 <code>&lt;LogoutButton /&gt;</code>。同时它还会渲染上一个示例中的 <code>&lt;Greeting /&gt;</code>。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLoginClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLogoutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>    <span class="token keyword">let</span> button<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginControl</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react官网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习react(01)</title>
      <link href="2021/05/20/react1/"/>
      <url>2021/05/20/react1/</url>
      
        <content type="html"><![CDATA[<h1 id="复习react（01）"><a href="#复习react（01）" class="headerlink" title="复习react（01）"></a>复习react（01）</h1><h2 id="1-初始渲染页面"><a href="#1-初始渲染页面" class="headerlink" title="1.初始渲染页面"></a>1.初始渲染页面</h2><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>World<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在页面上渲染Hello,World!标题</p><h2 id="2-JSX语言"><a href="#2-JSX语言" class="headerlink" title="2.JSX语言"></a>2.JSX语言</h2><p>变量声明：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre><p>JSX属于JavaScript的语法扩展。JSX可以很好地描述UI应该呈现出它应有交互的本质形式。具有JavaScript的全部功能。</p><h3 id="为什么使用JSX"><a href="#为什么使用JSX" class="headerlink" title="为什么使用JSX"></a>为什么使用JSX</h3><p>个人见解结合官网：</p><blockquote><ul><li>React认为渲染逻辑本质上与其他UI逻辑存在耦合。如：UI中要绑定处理事件、数据状态发生变化要通知UI，在UI中展示准备好的数据；</li><li>React并没有将<strong>标记与逻辑进行分离到不同文件</strong>这种认为地分离方式（简单理解就是并没有如同小程序那样分离成JS、HTML、CSS文件）。而是将二者共同存放在称之为“组件”的松散耦合单元中，<a href="https://en.wikipedia.org/wiki/Separation_of_concerns">实现关注点分离</a>。</li><li>React<mark>不强制要求</mark>使用JSX，但是，在JavaScript代码中将JSX和UI放在一起时，会在视觉上有辅助作用。还可以使React显示更多有用的错误和警告信息。</li></ul></blockquote><h3 id="在JSX中嵌入表达式"><a href="#在JSX中嵌入表达式" class="headerlink" title="在JSX中嵌入表达式"></a>在JSX中嵌入表达式</h3><p>声明name变量，在JSX中使用，将它包裹在大括号内：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Josh Perez'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    element<span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在JSX语法中，你可以在大括号内放置任何有效的<strong>JavaScript表达式</strong>。如：<mark>2+2</mark>，<mark>user.firstName</mark>或<mark>formatName(user)</mark>都是有效的JavaScript表达式。</p><p>调用formatName(user)：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Harper'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span>  <span class="token string">'Perez'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*切记组件JSX语言，不能用{}，要用()*/</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    element<span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="JSX也是一个表达式"><a href="#JSX也是一个表达式" class="headerlink" title="JSX也是一个表达式"></a>JSX也是一个表达式</h3><p>在编译后，JSX表达式会被转为普通JavaScript函数调用，并且在对其取值后得到JavaScript对象。</p><p>可以在<strong>if</strong>语句和<strong>for</strong>循环的代码块使用JSX，将JSX赋值给变量，可以作为参数传入和从函数返回JSX：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">getGreeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> Stranger<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="JSX特定属性"><a href="#JSX特定属性" class="headerlink" title="JSX特定属性"></a>JSX特定属性</h3><p>你可以通过使用引号，来将属性值指定为字符串字面量：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabIndex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre><p>也可以使用大括号，来在属性值中插入一个JavaScript表达式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span></code></pre><p> 对于同一属性，不同同时使用引号和大括号这两种符号。</p><p><mark>JSX语法上更接近JavaScript而不是HTML，所以React DOM使用小驼峰命名，如：className。</mark></p><h3 id="使用JSX指定子元素"><a href="#使用JSX指定子元素" class="headerlink" title="使用JSX指定子元素"></a>使用JSX指定子元素</h3><p>如果一个标签内没有内容，就把它变成单标签，如同XML语法一样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p>JSX标签里能够包含很多子元素：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Good to see you here<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre><h3 id="JSX防止注入攻击"><a href="#JSX防止注入攻击" class="headerlink" title="JSX防止注入攻击"></a>JSX防止注入攻击</h3><p>可以安全地在JSX中插入用户输入内容：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> title <span class="token operator">=</span> response<span class="token punctuation">.</span>potentiallyMaliciousInput<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 直接使用是安全的</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>React DOM在渲染所有输入内容之前，默认会进行转义。可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。都会在渲染前被转换为字符串。可以有效防止<a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS</a>攻击。</p><h3 id="JSX表示对象"><a href="#JSX表示对象" class="headerlink" title="JSX表示对象"></a>JSX表示对象</h3><p>Babel会把JSX转译成一个名为React.createElement()函数调用。</p><p>以下两种示例代码等效：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Hello<span class="token punctuation">,</span>World<span class="token operator">!</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>    <span class="token string">'h1'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>className<span class="token punctuation">:</span> <span class="token string">'greeting'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'Hello,world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><mark>React.createElement()</mark>会预先执行一些检查，以帮助我们编写无错误代码，实际上它创建了一个这样的对象：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//简化后的结构</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        className<span class="token punctuation">:</span> <span class="token string">'greeting'</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token string">'Hello,world!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这些对象被称为”React元素“。它们描述了我们希望在屏幕上看到的内容。React通过读取这些对象，然后使用它们来构建DOM以及保持随时更新。</p><h2 id="3-元素渲染"><a href="#3-元素渲染" class="headerlink" title="3.元素渲染"></a>3.元素渲染</h2><p><strong>元素是构成React应用的最小砖块。</strong></p><p>元素描述了在屏幕上想看的内容。</p><p>与浏览器的DOM元素不同，React元素是创建开销极小的普通对象。ReactDOM会负责更新DOM来与React元素保持一致。</p><h3 id="将一个元素渲染为DOM"><a href="#将一个元素渲染为DOM" class="headerlink" title="将一个元素渲染为DOM"></a>将一个元素渲染为DOM</h3><p>假设在我们的项目HTML文件内有一个<mark></mark></p><div>:<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>我们将其成为”根“DOM节点，因为该节点内的所有内容都将由React DOM管理。</p><p>仅<strong>使用React</strong>构建的应用通常只有单一的根DOM节点。如果将React集成进一个已有应用，那么你可以在应用中包含任意多的独立根DOM节点。</p><p>将React元素渲染到根DOM节点中（将其一起传入ReactDOM.render()中）：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="更新已渲染的元素"><a href="#更新已渲染的元素" class="headerlink" title="更新已渲染的元素"></a>更新已渲染的元素</h3><p>React元素是不可变对象。一旦被创建，就无法更改它的子元素或者属性。</p><p>更新UI唯一的方式是创建一个全新的元素，并将其传入**ReactDOM.render()**。</p><p>更改时间，计时器的例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>现在时间 <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个例子中，setInterval()回调函数，每秒都会调用ReactDOM.render()。</p><p>当然这只是示例，大多数时候React应用只会调用一次ReactDOM.render()。之后会有<a href="https://react.docschina.org/docs/state-and-lifecycle.html">封装到有状态组件</a>的使用。</p><h3 id="React只更新它需要更新的部分"><a href="#React只更新它需要更新的部分" class="headerlink" title="React只更新它需要更新的部分"></a>React只更新它需要更新的部分</h3><p>React DOM会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使DOM达到预期的状态。</p><p><img src="https://react.docschina.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif" alt="检查工具下的效果"></p><p>尽管每一秒都会新建一个描述整个UI树的元素，React DOM只会更新实际改变了的内容，就是当前例子中的文本节点。</p><h2 id="4-组件-amp-Props"><a href="#4-组件-amp-Props" class="headerlink" title="4.组件&amp;Props"></a>4.组件&amp;Props</h2><p>将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。</p><p>组件类似JavaScript函数。接收任意的入参。</p><h3 id="函数组件与class组件"><a href="#函数组件与class组件" class="headerlink" title="函数组件与class组件"></a>函数组件与class组件</h3><p>定义组件最简单的方式就是编写JavaScript函数：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre><p>这属于一个有效的React组件，因为它接收唯一带有数据的“props”（代表属性）对象与并返回一个React元素。这类组件被称为<strong>”函数组件“</strong>，因为其本质就是JavaScript函数。</p><p>还可以用ES6的class来定义组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这属于class组件，上面两个组件在React里是等效的。</p><h3 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h3><p>之前所写的React元素都只是DOM标签：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></code></pre><p>不过，React元素也可以是用户字定义的组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>当React元素为用户自定义组件时，它会将JSX所接收的<strong>属性（attributes）以及子组件（children）</strong>转换为单个对象传递给组件，这个对象被称之为<strong>”props“</strong>。</p><p>简单解释，就是将属性变为对象传入函数内部。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    element<span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码会在页面上渲染"Hello,Sar"</span></code></pre><blockquote><p>解析：</p><ul><li>首先调用**ReactDOM.render()<strong>函数，并传入</strong><welcome name="Sara">**作为参数。</welcome></li><li>React调用<strong>Welcome</strong>组件，并将**{name: ‘Sara’}**作为props传入。</li><li><strong>Welcome</strong>组件将**<h1>Hello,Sara</h1>**元素作为返回值。</li><li>React DOM将DOM高效地更新为**<h1>Hello,Sara</h1>**.</li></ul></blockquote><p><mark>组件名称必须以大写字母开头</mark></p><blockquote><p>React会将以小写字母开头的组件视为原生DOM标签。</p></blockquote><h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><p>组件可以在其输出中引用其他组件。所以我们可以用同一组件来抽象出任意层次的细节。按钮，表单，对话框，甚至整个屏幕的内容：在React应用程序中，这些通常都会以组件的形式表示。</p><p>多次渲染<strong>Welcome</strong>组件的<strong>App</strong>组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Edite<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通常，每个新的React应用程序的顶层组件都是<mark>App</mark>组件。但是，如果将React集成到现有的应用程序中，可能需要使用像<mark>Button</mark>这样的小组件，并自下而下地将这类组件逐步应用到视图层的每一处。（暂时理解困难）</p><h3 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h3><p>将组件拆分为更小的组件。</p><p><mark>Comment</mark>组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Avatar<span class="token punctuation">"</span></span>                    <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span>                    <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>                <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Commet-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>该组件用于描述一个社交媒体网站上的评论功能，它接收<mark>author</mark>（对象），<mark>text</mark>（字符串）以及<mark>data</mark>（日期）作为props。</p><p>但是不难看出来，组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，可以从中提取出来一些组件。</p><ul><li><p>首先，提取Avatar组件：</p></li><li><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Avatar<span class="token punctuation">"</span></span>            <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span>            <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><mark>Avatar</mark>不需知道它在Comment组件内部是如何渲染的。因此，我们给它的props起了一个更通用的名字：<mark>user</mark>，而不是<mark>author</mark>。</p></li></ul><p>  针对Comment做些调整：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  接下来进行<mark>UserInfo</mark>组件的提取，该组件在用户名旁渲染<mark>Avatar</mark>组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  <mark>进一步简化Comment组件：</mark></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserInfo</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。</p><p>  如果UI中有一部分被多次使用，或者本身足够复杂，那么就可以提取出独立组件。</p></blockquote><h3 id="Props的只读性"><a href="#Props的只读性" class="headerlink" title="Props的只读性"></a>Props的只读性</h3><p>组件无论是<strong>函数组件还是class组件</strong>，都不能修改自身的props。</p><p>例子，sum函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样的函数被称为<strong>“纯函数”</strong>，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。</p><p>不是纯函数的例子（更改了入参）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    account<span class="token punctuation">.</span>total <span class="token operator">-</span><span class="token operator">=</span> amount<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>React的规则：</p><p><strong>所有React组件都必须像纯函数一样保护它们的props不被更改。</strong></p><p>但是，程序的UI是动态的，我们会引入“state”，在不违反上述规则的情况下，state允许React组件随用户操作、网络响应或者其他变化而动态更改输出内容。</p><h2 id="5-State-amp-生命周期"><a href="#5-State-amp-生命周期" class="headerlink" title="5.State&amp;生命周期"></a>5.State&amp;生命周期</h2><p>最开始的例子，做了一个时钟渲染，通过ReactDOM.render()来修改想要渲染的元素：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    element<span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在下面，将学习如何封装真正可复用的Clock组件。</p><p>外观：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocalTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是这样，本质上没变，而且<strong>Clock</strong>组件需要设计一个计时器，并且需要每秒更新UI。</p><p>理想情况下，只需编写一次代码，便可以让Clock组件自我更新。就如这样：</p><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实现这样的效果我们需要在<strong>Clock</strong>组件中添加”state”来实现这个功能。</p><p>State与props类似，但是state是私有的，并且完全受控于当前组件。</p><h3 id="将函数组件转换成class组件"><a href="#将函数组件转换成class组件" class="headerlink" title="将函数组件转换成class组件"></a>将函数组件转换成class组件</h3><p>通过以下五步将 <code>Clock</code> 的函数组件转成 class 组件：</p><blockquote><ol><li>创建一个同名的ES6 class，并且继承于<code>React.Component</code>。</li><li>添加一个空的<code>render()</code>方法。</li><li>将函数体移动到<code>render()</code>方法中。</li><li>在<code>render()</code>方法中使用<code>this.props</code>替换<code>props</code>。</li><li>删除剩余的空函数声明。</li></ol></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在<code>Clock</code>组件被定义为class，而不是函数。</p><p>每次组件更新时<code>render</code>方法都会被调用，但只要在相同的DOM节点中渲染<code>&lt;Clock /&gt;</code>，就仅有一个<code>Clock</code>组件的<mark>class实例</mark>被创建使用。这就使得我们可以使用如state或生命周期方法等很多其他特性。</p><h3 id="向class组件中添加局部的state"><a href="#向class组件中添加局部的state" class="headerlink" title="向class组件中添加局部的state"></a>向class组件中添加局部的state</h3><p>通过以下三步将<code>date</code>从props移动到state中：</p><blockquote><ol><li><p>把<code>render()</code>方法中的<code>this.props.date</code>替换成this.state.date:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加一个**<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#constructor">class构造函数</a>**，然后再该函数中为<code>this.state</code>赋初值：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过以下方式将<code>props</code>传递到父类的构造函数中：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Class组件应该始终用<code>props</code>参数来调用父类的构造函数。</p></li><li><p>移除<code>&lt;Clock /&gt;</code>属性中的<code>date</code>属性：</p><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>未加计时器的整体代码如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>         ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol></blockquote><p>接下来设置<mark>Clock</mark>的计时器并每秒进行更新。</p><h3 id="将生命周期方法添加到Class中"><a href="#将生命周期方法添加到Class中" class="headerlink" title="将生命周期方法添加到Class中"></a>将生命周期方法添加到Class中</h3><p>在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。</p><p>当<code>Clock</code>组件第一次被渲染到DOM中的时候，就为其设置一个计时器。这在React中被称为<mark>“挂载(mount)”</mark>。</p><p>同时，当DOM中<code>Clock</code>组件被删除的时候，应该清除计时器。这在React中被成为<mark>“卸载(unmount)”</mark>。</p><p>我们可以为class组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这些方法叫做“生命周期方法“。</p><p><code>componentDidMount()</code>方法会在组件已经被渲染到DOM中后运行，所以，最好在这里设置计时器：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1000</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把计时器的ID保存在<code>this</code>之中(<code>this.timerID</code>)。</p><p>尽管<code>this.props</code>和<code>this.state</code>是React本身设置的，且都拥有特殊的含义，但是其实你可以向class中随意添加不参与数据流（比如计时器ID）的额外字段。</p><p>在<code>componentWillUnmount()</code>生命周期方法中清除计时器：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后，实现一个叫<code>tick()</code>的方法，<code>Clock</code>组件每秒都会调用它。</p><p>使用<code>this.setState()</code>来时刻更新组件state：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>data<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">1000</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>以上代码发生的顺序（生命周期的重中之重，读过就能理解）</strong>：</p><blockquote><ol><li>当 <code>&lt;Clock /&gt;</code> 被传给 <code>ReactDOM.render()</code>的时候，React 会调用 <code>Clock</code> 组件的构造函数。因为 <code>Clock</code> 需要显示当前的时间，所以它会用一个包含当前时间的对象来初始化 <code>this.state</code>。我们会在之后更新 state。</li><li>之后 React 会调用组件的 <code>render()</code> 方法。这就是 React 确定该在页面上展示什么的方式。然后 React 更新 DOM 来匹配 <code>Clock</code> 渲染的输出。</li><li>当 <code>Clock</code> 的输出被插入到 DOM 中后，React 就会调用 <code>ComponentDidMount()</code> 生命周期方法。在这个方法中，<code>Clock</code> 组件向浏览器请求设置一个计时器来每秒调用一次组件的 <code>tick()</code> 方法。</li><li>浏览器每秒都会调用一次 <code>tick()</code> 方法。 在这方法之中，<code>Clock</code> 组件会通过调用 <code>setState()</code> 来计划进行一次 UI 更新。得益于 <code>setState()</code> 的调用，React 能够知道 state 已经改变了，然后会重新调用 <code>render()</code> 方法来确定页面上该显示什么。这一次，<code>render()</code> 方法中的 <code>this.state.date</code> 就不一样了，如此以来就会渲染输出更新过的时间。React 也会相应的更新 DOM。</li><li>一旦 <code>Clock</code> 组件从 DOM 中被移除，React 就会调用 <code>componentWillUnmount()</code> 生命周期方法，这样计时器就停止了。</li></ol></blockquote><h3 id="正确的使用State"><a href="#正确的使用State" class="headerlink" title="正确的使用State"></a>正确的使用State</h3><p>关于<mark>setState()</mark>你应该了解的三件事：</p><blockquote><p><strong>1. 不要直接修改State</strong></p><p>例如，以下代码不会重新渲染组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//Wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span></code></pre><p>而是应该使用<code>setState()</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//Correct</span><span class="token comment" spellcheck="true">//我的理解，这更像是对对象的直接修改，而不是赋值</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    comment<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2. State的更新可能是异步的</strong></p><p>因为性能问题，React可能会把多个<code>setState()</code>调用合并成一个调用。</p><p>因为<code>this.props</code>和<code>this.state</code>可能会异步更新，所以不要依赖他们的值来更新下一个状态。</p><p>例如，以下代码可能无法更新计数器：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//Wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要解决这个问题，可以让<code>setState()</code>接收一个函数而不是一个对象。这个函数用上一个state作为第一个参数，将此次更新被应用时的props做为第二个参数：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//Correct</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//Correct</span><span class="token comment" spellcheck="true">//两者不同在于上面是箭头函数，下面是普通函数</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>3. State的更新会被合并</strong></p><p>当你调用<code>setState()</code>的时候，React会把你提供的对象合并到当前的state。</p><p>例如，你的state包含几个独立的变量：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        comments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后你可以分别调用<code>setState()</code>来单独地更新它们：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            posts<span class="token punctuation">:</span> response<span class="token punctuation">.</span>posts        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fetchComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            comments<span class="token punctuation">:</span> response<span class="token punctuation">.</span>comments        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的合并是浅合并，所以 <code>this.setState({comments})</code> 完整保留了 <code>this.state.posts</code>， 但是完全替换了 <code>this.state.comments</code>。</p></blockquote><h3 id="数据是向下流动的"><a href="#数据是向下流动的" class="headerlink" title="数据是向下流动的"></a>数据是向下流动的</h3><p>不管是父组件或是子组件都<strong>无法知道</strong>某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。</p><p>这就是为什么称 state 为<strong>局部的或是封装的</strong>的原因。除了拥有并设置了它的组件，<strong>其他组件都无法访问</strong>。</p><p>组件可以选择把它的 state 作为 props 向下传递到它的子组件中：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>这对于自定义组件同样适用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormattedDate</span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p><code>FormattedDate</code> 组件会在其 props 中接收参数 <code>date</code>，但是组件本身无法知道它是来自于 <code>Clock</code> 的 state，或是 <code>Clock</code> 的 props，还是手动输入的：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FormattedDate</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://codepen.io/gaearon/pen/zKRqNB?editors=0010">示例</a></p><blockquote><p>这通常会被叫做“自上而下”或是“单向”的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</p><p>如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。</p></blockquote><p>为了证明每个组件都是真正独立的，我们可以创建一个渲染三个 <code>Clock</code> 的 <code>App</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每个 <code>Clock</code> 组件都会单独设置它自己的计时器并且更新它。</p><p>在 React 应用中，组件是有状态组件还是无状态组件属于组件实现的细节，它可能会随着时间的推移而改变。你可以在有状态的组件中使用无状态的组件，反之亦然。</p><h2 id="6-事件处理"><a href="#6-事件处理" class="headerlink" title="6.事件处理"></a>6.事件处理</h2><p>React元素的事件处理和DOM元素的很相似，但是有一点语法上的不同：</p><ul><li>React事件的命名采用小驼峰，而不是纯小写；</li><li>使用JSX语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li></ul><p>例如：</p><p>传统的HTML</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activateLasers()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Activate Lasers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>在React中略微不同：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>activateLasers<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    Activate Lasers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>在React中另一个不同点是不能通过返回<code>false</code>的方式阻止默认行为。你必须显式的使用<code>preventDefault</code>。如，传动的HTML中阻止链接默认打开一个新页面：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>The link was clicked.<span class="token punctuation">'</span>); return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>在React中，是这样的：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The link was clicked.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            Click me        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//e是一个合成事件</span></code></pre><p>使用React时，一般不需要使用<code>addEventListener</code>为已创建的DOM元素添加监听器。只需要在该元素<strong>初始渲染</strong>的时候添加监听器即可。</p><p>使用ES6 class语法定义一个组件的时候，通常的做法是将事件处理函数声明为class中的方法。<code>Toggle</code>组件渲染切换开关状态的按钮：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isToggleOn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//为了在回调中使用`this`，这个绑定是必不可少的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            isToggleOn<span class="token punctuation">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>isToggleOn        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isToggleOn <span class="token operator">?</span> <span class="token string">'ON'</span> <span class="token punctuation">:</span> <span class="token string">'OFF'</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toggle</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>必须谨慎对待JSX回调函数中的<mark>this</mark>，在JavaScript中，class的方法默认不会绑定<mark>this</mark>。如果忘记绑定<mark>this.handleClick</mark>并把它传入了<code>onClick</code>，当你调用这个函数的时候，<mark>this</mark>的值为<code>undefined</code>。</p><p>这不是React的特有行为，而是与JavaScript函数工作原理有关。通常情况下，如果没有在方法后面添加<mark>（）</mark>，例如<mark>onClick={this.handleClick}</mark>，应该为这个方法绑定<mark>this</mark>。</p><blockquote><p>不想用bind的话，可以用实验性的public class fields语法，可以使用class fields正确的绑定回调函数：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LogginButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此语法确保`handleClick`内的`this`已被绑定。</span>    <span class="token comment" spellcheck="true">//注意：这是*实验性*语法</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is:'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                Click me            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>个人目前觉得，不太稳定的话，还是绑定this使用吧。</p></blockquote><p><strong>向事件处理程序传递参数</strong></p><p>在循环中，通常我们会为事件处理函数传递额外的参数。例如，若<code>id</code>是要删除的那一行的ID，以下两种方式都可以向事件处理函数传递参数：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteDow<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>上述两种方式是等价的，分别通过箭头函数和Function.prototype.bind来实现。</p><p>在这两种情况下，React的时间对象<mark>e</mark>会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过<mark>bind</mark>方式，事件对象以及跟多的参数将会被隐式的进行传递。</p></div>]]></content>
      
      
      <categories>
          
          <category> react复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react官网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习面试经验一</title>
      <link href="2021/05/10/mianjing1/"/>
      <url>2021/05/10/mianjing1/</url>
      
        <content type="html"><![CDATA[<h1 id="临时的一篇复习，很好的文章"><a href="#临时的一篇复习，很好的文章" class="headerlink" title="临时的一篇复习，很好的文章"></a>临时的一篇复习，很好的文章</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="一、数组和链表"><a href="#一、数组和链表" class="headerlink" title="一、数组和链表"></a>一、数组和链表</h3><p>两者的区别：</p><blockquote><ol><li>存储空间上：<strong>数组</strong>在内存中是连续的，从栈中分配空间；<strong>链表</strong>是不可以连续的，从堆中分配空间。</li><li>查询、访问：<strong>数组</strong>可以随机访问每一个元素，查找速度较快；<strong>链表</strong>必须是顺序访问，<mark>不能</mark>随机访问。</li><li>空间使用：<strong>链表</strong>对内存空间的利用率较高，可扩展性高；<strong>数组</strong>不行，数组的空间大小是固定的，不适合动态存储，不方便动态添加。</li><li>添加或删除元素：数组比链表<mark>慢</mark>，因为数组要移动<strong>大量</strong>的元素，而链表只需修改指针即可。</li></ol></blockquote><h3 id="二、堆和栈的区别"><a href="#二、堆和栈的区别" class="headerlink" title="二、堆和栈的区别"></a>二、堆和栈的区别</h3><blockquote><ol><li>申请方式：栈（stack）由系统自动分配。堆：需要程序员自己申请，并指明大小。</li><li>申请效率比较：<br>栈：由<strong>系统自动分配</strong>，速度较快。<br>堆：是由<strong>new分配的内存</strong>，一般速度较慢，而且容易产生内存碎片，不过用起来最方便。</li><li>申请大小的限制：<br>栈顶的地址和栈的最大容量是系统预先<mark>规定好的</mark>，在WINDOWS下，栈的大小是2M，超出剩余空间会<strong>溢出</strong>。<br>堆的大小受限于计算机系统中有效的虚拟内存。</li><li>数据结构区别：<br>堆可以被看成是一棵树，如：堆排序。<br>栈：一种先进后出的数据结构。</li><li>缓存方式区别：<br>栈：使用的是一级缓存，他们通常都是被调用时处于存储空间中，调用完毕立即释放。<br>堆：存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定。</li></ol></blockquote><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><p>通常将数组的第一个元素定义为比较元素，通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按照此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>|3、5、6、2、1、7、8、4|<br>-&gt; |3、2、1、4| &amp;&amp; |5、6、7、8|<br>-&gt; |2、1| &amp;&amp; |3、4| &amp;&amp; |5、6| &amp;&amp; |7、8|<br>-&gt; 1 2 3 4 5 6 7 8</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="一、索引优化"><a href="#一、索引优化" class="headerlink" title="一、索引优化"></a>一、索引优化</h3><ol><li>对较小的数据列使用索引，这样会使索引文件更小，同时内存中也可以装载更多的索引键；</li><li>对where，on，group by，order by中出现的列使用索引；</li><li>并不是所有索引对查询都有效，当索引列有大量数据重复时，查询可能不会去利用索引；</li><li>索引并不是越多越好。提高查询效率，但同时也降低了insert及update的效率，因为可能会重建索引；</li><li>应尽量避免在where子句中使用<mark>!=</mark>或<mark>&lt;&gt;</mark>操作符或使用<mark>or</mark>来连接条件，否则引擎放弃使用索引而进行全表扫描；</li><li>where后的查询字段尽量减少使用函数或者表达式操作，因为会造成索引失效；</li><li>尽量的扩展索引，不要新建索引。</li></ol><h3 id="二、数据库优化"><a href="#二、数据库优化" class="headerlink" title="二、数据库优化"></a>二、数据库优化</h3><h3 id="三、索引的最左优先原则"><a href="#三、索引的最左优先原则" class="headerlink" title="三、索引的最左优先原则"></a>三、索引的最左优先原则</h3><h3 id="四、数据库左连、右连和内连"><a href="#四、数据库左连、右连和内连" class="headerlink" title="四、数据库左连、右连和内连"></a>四、数据库左连、右连和内连</h3><blockquote><ul><li><strong>左连</strong>：首先取出a表中所有数据，然后再加上与a，b匹配的数据。</li><li><strong>右连</strong>：指的是首先取出b表中所有数据，然后再加上与a，b匹配的数据。</li><li><strong>内连</strong>：两个表a，b相连接，要取出id相同的字段。</li></ul></blockquote><h3 id="五、存储引擎以及他们之间的区别"><a href="#五、存储引擎以及他们之间的区别" class="headerlink" title="五、存储引擎以及他们之间的区别"></a>五、存储引擎以及他们之间的区别</h3>]]></content>
      
      
      <categories>
          
          <category> 八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习JS</title>
      <link href="2021/05/10/review/"/>
      <url>2021/05/10/review/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h1><blockquote><p>书：《Javascript高级程序设计》</p></blockquote><p>JavaScript能够实现复杂的计算交互，包括闭包、匿名函数，甚至元编程等。<br><mark>桌面浏览器</mark>、<mark>手机浏览器</mark>和<mark>屏幕阅读器</mark>也支持JavaScript。<br>微软拥有自家客户端脚本语言—<u>VBScript</u>。</p><h2 id="lala">了解历史</h2><p>个人想要了解：<br>早期，网页越来越大，越来越复杂，使得验证简单的表单需要大量与服务器的往返通信，成为用户的痛点。<br>Mocha（LiveScript）—脚本语言诞生了。网景与Sun公司共同开发，后来发布后LiveScript改名为JavaScript。<br>创立之初，想在客户端和服务端都使用它，而在服务端，给他起了个名，叫LiveWire。<br>微软在当时发布了JScript，导致出现两个版本的JavaScript。<br>最终成立第39技术委员会（TC39），将JS语言标准化，使JS成为了<mark>通用、跨平台、厂商中立</mark>的脚本语言。<br>TC39委员会由网景、Sun、微软、Borland、Nombas和其他对这门脚本语言有兴趣的工程师组成。<br>最终打造出ECMA-262 — <mark><strong>ECMAScript</strong></mark>。<br>各家浏览器最终都以ECMAScript作为自己JavaScript实现的依据。<br><strong>个人见解</strong>：由此可见，ECMAScript是一个依据标准。其实就是一种<strong>规范</strong>。</p><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><p>核心：ECMAScript<br>文档对象模型：DOM<br>浏览器对象模型：BOM</p><!-- 图片放置 --><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/js.png" alt="js"></p><p>其实ECMAScript并不局限于Web浏览器上。<br><mark><u>Web浏览器</u></mark>只是ECMAScript实现可能存在的一种<mark><strong>宿主环境</strong></mark><br>宿主环境提供ECMAScript的基准实现和与环境自身交互必需的扩展（例如DOM）。<br>扩展使用ECMAScript核心类型和语法，同时呢，提供特定于环境的额外功能。<br>大体就是扩展自带环境和额外功能，只是使用了ECMAScript的核心类型和语法。<br>同样作为<mark><strong>宿主环境</strong></mark>的还有服务器端JavaScript的<mark><u>Node.js</u></mark>和已经淘汰的<mark><u>Adobe Flash</u></mark>。<br>ECMA描述了JS语言的：<u>语法、类型、语句、关键字、保留字、操作符、全局对象</u>。<br>ECMAScript只是所有关乎这个规范的语言的一个<strong>统称</strong>，他们之间是<strong>包含关系</strong>。<br>如：JavaScript实现了ECMAScript，同样Adobe ActionScript也一样实现了ECMAScript。</p><!-- lala[lala](#lala) --><blockquote><ul><li>ES5于2019年12月3日正式发布。 该版本致力于厘清第三版存在的起义，同时添加了新功能（<u>包括原生的解析和序列化JSON数据的JSON对象</u>、<u>方便继承和高级属性定义的方法</u>、<u>增强ECMAScript引擎解释和解释和执行代码能力的严格模式</u>）；</li><li>ES6于2015年6月发布，又称ES2015。最重要的一批增强特性。 ES6正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。</li></ul></blockquote><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p><strong>文档对象模型</strong>（DOM,Document Object Model）<br>是一个应用编程接口（API），用于在HTML中使用扩展的XML。<br>DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种节点，包含不同的数据。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Sample Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo/images/tu1.jpg" alt="tu1"></p><p>DOM的好处在于，可以让开发者，<strong>随意</strong>控制网页的内容和结构，使用DOM API可以轻松删除、添加、替换和修改节点。</p><h3 id="为什么DOM是必需的"><a href="#为什么DOM是必需的" class="headerlink" title="为什么DOM是必需的"></a>为什么DOM是必需的</h3><p>因为早期网景和微软的竞争，担心Web发生分裂，变成面向浏览器开发网页。所以，W3C制定了DOM标准的进程。</p><blockquote><p>注：DOM并非只能通过JS实现，很多其他语言也可以实现，只不过对于浏览器来说，DOM就是使用ECMAScript实现的，如今已经成为JS语言的一大组成部分。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书：《Javascript高级程序设计》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/09/hello-world/"/>
      <url>2021/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><br>李还行<br><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo@1.0/images/QQ%E6%88%AA%E5%9B%BE20210510104728.jpg" alt="aaa"><br><a href="https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo@1.0/images/QQ%E6%88%AA%E5%9B%BE20210510104728.jpg">https://cdn.jsdelivr.net/gh/woyaojinzuzhi/picgo@1.0/images/QQ%E6%88%AA%E5%9B%BE20210510104728.jpg</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
